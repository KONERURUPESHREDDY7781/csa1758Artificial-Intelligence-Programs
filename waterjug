from collections import deque
def print_solution(path):
    for state in path:
        print(f"Jug1: {state[0]}L, Jug2: {state[1]}L")
    print()
def water_jug_solver(jug1_capacity, jug2_capacity, target):
    visited = set()
    queue = deque([(0, 0, [])])
    while queue:
        jug1, jug2, path = queue.popleft()
        if jug1 == target or jug2 == target:
            path.append((jug1, jug2))
            print("Solution Found:")
            print_solution(path)
            return True
        if (jug1, jug2) in visited:
            continue
        visited.add((jug1, jug2))
        current_path = path + [(jug1, jug2)]
        actions = [
            (jug1_capacity, jug2),  
            (jug1, jug2_capacity),  
            (0, jug2),              
            (jug1, 0),            
            (min(jug1 + jug2, jug1_capacity), jug2 - (min(jug1 + jug2, jug1_capacity) - jug1)),  
            (jug1 - (min(jug1 + jug2, jug2_capacity) - jug2), min(jug1 + jug2, jug2_capacity)),  
        ]
        for action in actions:
            queue.append((action[0], action[1], current_path))
    print("No solution found.")
    return False
jug1_capacity = 4
jug2_capacity = 3
target = 2

water_jug_solver(jug1_capacity, jug2_capacity, target)
